from typing import List, Dict, Any

from verifiers.parsers import XMLParser
from verifiers.rubrics.pentest_rubric import PentestRubric

class CodePentestRubric(PentestRubric):
    """Pentest rubric extended with code-execution checks.

    In addition to the eight penetration-testing reward metrics, this rubric
    awards points when the agent successfully executes code snippets during the
    assessment process (e.g. custom exploits, reconnaissance scripts, proof of
    concept, etc.).
    """

    def __init__(self,
                 parser: XMLParser | None = None,
                 env_parser: XMLParser | None = None):
        # The parent handles all pentest-specific parsing; we keep that parser.
        super().__init__(parser if parser is not None else XMLParser(fields=[
            "vulnerability",
            "target",
            "path",
            ("cve", "cwe"),
            "cvss_score",
            "exploit",
            "privilege_level",
            "proof",
            "executive_summary",
            "technical_details",
            "poc_code",
            "remediation",
            "timestamp",
            "network_action",
            "stealth_level",
        ]))

        # Additional parsers for code steps and environment feedback.
        self.code_parser: XMLParser = XMLParser(fields=["reasoning", ("code", "answer")])
        self.env_parser: XMLParser = env_parser if env_parser is not None else XMLParser(fields=["output"])

        # Register the new reward function & weight (10% by default).
        self.reward_funcs.append(self.code_execution_reward_func)
        self.reward_weights.append(0.10)

    # ------------------------------------------------------------------
    # Reward: Code execution success
    # ------------------------------------------------------------------
    def code_execution_reward_func(self,
                                   completions: List[List[Dict[str, str]]],
                                   **kwargs) -> List[float]:
        """Reward proportional to successful code executions.

        A code step is detected when the assistant includes a <code> block (or
        <answer>). The subsequent *user* message is parsed for an <output>
        tag representing the environment's response. Any non-error, non-empty
        output counts as a success.
        """

        def check_execution(trajectory: List[Dict[str, str]]) -> float:
            total = 0
            successes = 0
            for i, msg in enumerate(trajectory):
                if msg["role"] != "assistant":
                    continue
                parsed_asst = self.code_parser.parse(msg["content"])
                if hasattr(parsed_asst, "code") and parsed_asst.code is not None:
                    total += 1
                    if i + 1 < len(trajectory) and trajectory[i + 1]["role"] == "user":
                        env_resp = trajectory[i + 1]["content"]
                        parsed_env = self.env_parser.parse(env_resp)
                        if (hasattr(parsed_env, "output") and parsed_env.output
                                and not str(parsed_env.output).startswith("Error:")):
                            successes += 1
            if total == 0:
                return 0.0
            # Same heuristic as CodeRubric: 30% proportional + 5% per success.
            return 0.3 * (successes / total) + 0.05 * successes

        return [check_execution(c) for c in completions] 