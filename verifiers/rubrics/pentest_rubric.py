from typing import List, Dict, Any, Set
import re
import logging

from verifiers.parsers import XMLParser
from verifiers.rubrics import Rubric

class PentestRubric(Rubric):
    """
    Simple Penetration Testing Rubric focused on nmap reconnaissance rewards.
    
    Single reward function:
    1. Nmap Discovery (100%): Discovery of hosts, ports, and services using nmap
    """
    
    def __init__(self,
                 parser: XMLParser = XMLParser(fields=[
                     "command",
                     "output", 
                     ("host", "target"),
                     ("port", "ports"),
                     "service"
                 ])):
        super().__init__()
        self.parser = parser
        
        # Basic nmap patterns
        self.nmap_pattern = re.compile(r'nmap\s+.*\d+\.\d+\.\d+\.\d+')
        
        # Port status patterns
        self.port_pattern = re.compile(r'(\d+/\w+)\s+open')
        
        # Service detection patterns
        self.service_patterns = {
            'http': re.compile(r'80/tcp\s+open\s+http'),
            'https': re.compile(r'443/tcp\s+open\s+https'),
            'ssh': re.compile(r'22/tcp\s+open\s+ssh'),
            'ftp': re.compile(r'21/tcp\s+open\s+ftp'),
            'telnet': re.compile(r'23/tcp\s+open\s+telnet'),
            'smtp': re.compile(r'25/tcp\s+open\s+smtp')
        }
        
        # Set up reward functions
        self.reward_funcs = [
            self.nmap_discovery_reward_func
        ]
        self.reward_weights = [1.0]

    def _extract_nmap_results(self, trajectory: List[Dict[str, str]]) -> Dict[str, Set[str]]:
        """Extract nmap scan results from trajectory."""
        discovered = {
            'hosts': set(),
            'open_ports': set(),
            'services': set()
        }
        
        for msg in trajectory:
            if msg['role'] == 'assistant':
                parsed = self.parser.parse(msg['content'])
                
                # Check if this is an nmap command with output
                command = getattr(parsed, 'command', '')
                output = getattr(parsed, 'output', '')
                
                if 'nmap' in command.lower() and output:
                    # Extract hosts
                    host_matches = re.findall(r'Nmap scan report for ([\d\.]+)', output)
                    discovered['hosts'].update(host_matches)
                    
                    # Extract open ports
                    port_matches = self.port_pattern.findall(output)
                    discovered['open_ports'].update(port_matches)
                    
                    # Extract services
                    for service, pattern in self.service_patterns.items():
                        if pattern.search(output):
                            discovered['services'].add(service)
        
        return discovered

    def nmap_discovery_reward_func(self, completion: List[Dict[str, str]], **kwargs) -> float:
        """
        Nmap Discovery Reward: Discovery of hosts, ports, and services using nmap
        Rewards based on the amount of network information discovered.
        """
        discovered = self._extract_nmap_results(completion)
        
        # Score based on what was discovered
        host_score = min(1.0, len(discovered['hosts']) / 3.0)        # Max score for 3+ hosts
        port_score = min(1.0, len(discovered['open_ports']) / 10.0)  # Max score for 10+ ports  
        service_score = min(1.0, len(discovered['services']) / 5.0)  # Max score for 5+ services
        
        # Weighted combination - emphasize host and port discovery
        discovery_score = (
            host_score * 0.4 + 
            port_score * 0.4 + 
            service_score * 0.2
        )
        
        return discovery_score