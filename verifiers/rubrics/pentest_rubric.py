from typing import List, Dict, Any, Set
import re
import logging

from verifiers.parsers import XMLParser
from verifiers.rubrics import Rubric

class PentestRubric(Rubric):
    """
    Penetration Testing Rubric focused on proper nmap methodology.
    
    Reward functions:
    1. First Command (50%): Whether nmap is called as the first command
    2. Correct Flags (50%): Whether appropriate nmap flags are used for the scenario
    """
    
    def __init__(self,
                 parser: XMLParser = XMLParser(fields=[
                     "command",
                     "output", 
                     ("host", "target"),
                     ("port", "ports"),
                     "service"
                 ])):
        super().__init__()
        self.parser = parser
        
        # Scenario patterns and expected flags
        self.scenario_patterns = {
            'stealth': {
                'keywords': ['stealth', 'stealth scan', 'syn scan', 'tcp syn'],
                'required_flags': ['-sS'],
                'optional_flags': ['-T1', '-T2', '-f', '--scan-delay']
            },
            'service_detection': {
                'keywords': ['service', 'version', 'service version', 'enumerate', 'identification'],
                'required_flags': ['-sV'],
                'optional_flags': ['-A', '--version-intensity']
            },
            'port_scan': {
                'keywords': ['port scan', 'open ports', 'port', 'ports'],
                'required_flags': ['-p'],
                'optional_flags': ['-F', '--top-ports', '-r']
            },
            'comprehensive': {
                'keywords': ['comprehensive', 'aggressive', 'full scan', 'complete'],
                'required_flags': ['-A'],
                'optional_flags': ['-sV', '-O', '--script']
            },
            'os_detection': {
                'keywords': ['os detection', 'operating system', 'os fingerprint'],
                'required_flags': ['-O'],
                'optional_flags': ['-A', '--osscan-guess']
            },
            'script_scan': {
                'keywords': ['script', 'nse', 'enumerate'],
                'required_flags': ['--script'],
                'optional_flags': ['-A', '--script-args']
            }
        }
        
        # Basic nmap command pattern
        self.nmap_pattern = re.compile(r'nmap\s+', re.IGNORECASE)
        
        # Set up reward functions
        self.reward_funcs = [
            self.first_command_reward_func,
            self.correct_flags_reward_func
        ]
        self.reward_weights = [0.5, 0.5]

    def _detect_scenario(self, prompt: str) -> str:
        """Detect the scanning scenario from the user prompt."""
        prompt_lower = prompt.lower()
        
        # Check each scenario pattern
        for scenario, config in self.scenario_patterns.items():
            for keyword in config['keywords']:
                if keyword in prompt_lower:
                    return scenario
        
        # Default to basic scan if no specific scenario detected
        return 'basic'

    def _extract_first_command(self, completion: List[Dict[str, str]]) -> str:
        """Extract the first command from the assistant's response."""
        for msg in completion:
            if msg['role'] == 'assistant':
                parsed = self.parser.parse(msg['content'])
                command = getattr(parsed, 'command', '')
                if command.strip():
                    return command.strip()
        return ""

    def _extract_nmap_flags(self, command: str) -> List[str]:
        """Extract nmap flags from a command."""
        if not command.lower().startswith('nmap'):
            return []
        
        # Find all flags (starting with - or --)
        flags = re.findall(r'-+[\w-]+', command)
        return flags

    def _validate_flags_for_scenario(self, flags: List[str], scenario: str) -> Dict[str, Any]:
        """Validate if flags are appropriate for the detected scenario."""
        if scenario not in self.scenario_patterns:
            # For basic scenario, any valid nmap flags are acceptable
            return {
                'has_required': len(flags) > 0,
                'required_score': 1.0 if len(flags) > 0 else 0.0,
                'optional_score': 0.5  # Give some credit for basic usage
            }
        
        config = self.scenario_patterns[scenario]
        required_flags = config['required_flags']
        optional_flags = config['optional_flags']
        
        # Check required flags
        has_required = any(flag in ' '.join(flags) for flag in required_flags)
        required_score = 1.0 if has_required else 0.0
        
        # Check optional flags (bonus points)
        optional_matches = sum(1 for flag in optional_flags if flag in ' '.join(flags))
        optional_score = min(1.0, optional_matches / len(optional_flags)) if optional_flags else 0.0
        
        return {
            'has_required': has_required,
            'required_score': required_score,
            'optional_score': optional_score,
            'scenario': scenario,
            'expected_flags': required_flags,
            'found_flags': flags
        }

    def first_command_reward_func(self, prompt, completion, **kwargs) -> float:
        """
        Reward for calling nmap as the first command.
        """
        first_command = self._extract_first_command(completion)
        
        # Check if first command is nmap
        if self.nmap_pattern.match(first_command):
            return 1.0
        else:
            return 0.0

    def correct_flags_reward_func(self, prompt, completion, **kwargs) -> float:
        """
        Reward for using correct nmap flags for the scenario.
        """
        # Extract user prompt text
        if isinstance(prompt, list):
            prompt_text = ""
            for msg in prompt:
                if msg['role'] == 'user':
                    prompt_text = msg['content']
                    break
        else:
            prompt_text = str(prompt)
        
        # Detect scenario from prompt
        scenario = self._detect_scenario(prompt_text)
        
        # Get first command
        first_command = self._extract_first_command(completion)
        
        # If first command is not nmap, no flag reward
        if not self.nmap_pattern.match(first_command):
            return 0.0
        
        # Extract and validate flags
        flags = self._extract_nmap_flags(first_command)
        validation = self._validate_flags_for_scenario(flags, scenario)
        
        # Weighted score: 70% for required flags, 30% for optional flags
        total_score = (validation['required_score'] * 0.7) + (validation['optional_score'] * 0.3)
        
        return total_score

    def get_detailed_analysis(self, prompt, completion) -> Dict[str, Any]:
        """Get detailed analysis of command methodology."""
        # Extract user prompt text
        if isinstance(prompt, list):
            prompt_text = ""
            for msg in prompt:
                if msg['role'] == 'user':
                    prompt_text = msg['content']
                    break
        else:
            prompt_text = str(prompt)
        
        scenario = self._detect_scenario(prompt_text)
        first_command = self._extract_first_command(completion)
        is_nmap_first = self.nmap_pattern.match(first_command) is not None
        
        flags = self._extract_nmap_flags(first_command) if is_nmap_first else []
        flag_validation = self._validate_flags_for_scenario(flags, scenario)
        
        return {
            'scenario_detected': scenario,
            'first_command': first_command,
            'is_nmap_first': is_nmap_first,
            'flags_found': flags,
            'flag_validation': flag_validation,
            'first_command_score': 1.0 if is_nmap_first else 0.0,
            'flag_score': (flag_validation['required_score'] * 0.7) + (flag_validation['optional_score'] * 0.3)
        }