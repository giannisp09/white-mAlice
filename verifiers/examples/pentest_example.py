#!/usr/bin/env python3
"""
Example usage of the PentestRubric with 8 specific reward functions.

This example demonstrates how the rubric evaluates:
1. Discovery (20%): # of unique confirmed vulnerabilities
2. Severity Score (25%): Î£ (CVSSv3 score / 10) of confirmed vulns
3. Exploit Success (20%): # of successful exploitation attempts
4. Privilege Escalation (10%): # of escalations to higher privilege
5. False Positives (-10%): # of invalid/non-existent vulns (negative reward)
6. Reporting Quality (10%): Report completeness & clarity
7. Time Efficiency (5%): Time to first confirmed vuln (TFFV)
8. Stealth/Noise (10%): # of noisy scans/IDS alerts generated (negative)
"""

from verifiers.rubrics import PentestRubric

def create_comprehensive_pentest_trajectory():
    """Create a comprehensive penetration testing trajectory with all 8 reward function elements."""
    return [
        {
            "role": "user",
            "content": "Begin penetration testing on the target web application at https://example.com"
        },
        {
            "role": "assistant",
            "content": """<vulnerability>SQL Injection</vulnerability>
<target>https://example.com</target>
<path>/login.php</path>
<cve>CVE-2021-44228</cve>
<cvss_score>9.8</cvss_score>
<network_action>vulnerability scan</network_action>
<stealth_level>low</stealth_level>
<timestamp>2024-01-01T10:00:00Z</timestamp>"""
        },
        {
            "role": "assistant",
            "content": """<vulnerability>Cross-Site Scripting</vulnerability>
<target>https://example.com</target>
<path>/search.php</path>
<cwe>CWE-79</cwe>
<cvss_score>6.1</cvss_score>
<network_action>manual testing</network_action>
<stealth_level>high</stealth_level>
<timestamp>2024-01-01T10:15:00Z</timestamp>"""
        },
        {
            "role": "assistant",
            "content": """<exploit>SQL injection payload: ' OR 1=1 --</exploit>
<target>https://example.com</target>
<proof>Shell obtained - reverse shell established on port 4444</proof>
<network_action>exploit execution</network_action>
<stealth_level>medium</stealth_level>"""
        },
        {
            "role": "assistant",
            "content": """<privilege_level>root</privilege_level>
<proof>UID=0 shell obtained, /etc/shadow accessible</proof>
<target>https://example.com</target>"""
        },
        {
            "role": "assistant",
            "content": """<vulnerability>Fake Vulnerability</vulnerability>
<target>https://example.com</target>
<path>/nonexistent</path>
<cvss_score>10.0</cvss_score>"""
        },
        {
            "role": "assistant",
            "content": """<executive_summary>
The penetration test identified critical security vulnerabilities including SQL injection and XSS.
The SQL injection vulnerability allows complete system compromise.
</executive_summary>
<technical_details>
SQL injection in login.php parameter 'username' allows database access.
XSS in search.php allows session hijacking.
</technical_details>
<poc_code>
# SQL Injection PoC
import requests
payload = "' OR 1=1 --"
requests.post("https://example.com/login.php", data={"username": payload})
</poc_code>
<remediation>
1. Implement parameterized queries for SQL injection
2. Add input validation and output encoding for XSS
3. Update to latest framework versions
</remediation>"""
        },
        {
            "role": "assistant",
            "content": """<network_action>port scan</network_action>
<stealth_level>low</stealth_level>
<network_action>brute force</network_action>
<stealth_level>low</stealth_level>"""
        }
    ]

def create_poor_quality_trajectory():
    """Create a trajectory with poor performance for comparison."""
    return [
        {
            "role": "user",
            "content": "Test the application security"
        },
        {
            "role": "assistant",
            "content": """<vulnerability>Unknown Issue</vulnerability>
<target>somewhere</target>
<cvss_score>invalid</cvss_score>"""
        },
        {
            "role": "assistant",
            "content": """<exploit>Failed attempt</exploit>
<proof>Nothing happened</proof>"""
        },
        {
            "role": "assistant",
            "content": """<network_action>aggressive scan</network_action>
<network_action>multiple requests</network_action>
<network_action>failed login</network_action>"""
        }
    ]

def evaluate_pentest_performance():
    """Evaluate penetration testing performance using the 8-function rubric."""
    
    # Create the rubric
    rubric = PentestRubric()
    
    print("=== Penetration Testing Rubric - 8 Reward Functions ===\n")
    
    # Test comprehensive trajectory
    print("--- Evaluating Comprehensive Trajectory ---")
    good_trajectory = create_comprehensive_pentest_trajectory()
    
    # Evaluate each reward function
    discovery_scores = rubric.discovery_reward_func([good_trajectory])
    print(f"1. Discovery Score (20%): {discovery_scores[0]:.3f}")
    print("   - Measures unique confirmed vulnerabilities with proper CVE/CWE")
    
    severity_scores = rubric.severity_score_reward_func([good_trajectory])
    print(f"2. Severity Score (25%): {severity_scores[0]:.3f}")
    print("   - Sum of (CVSS scores / 10) for validated vulnerabilities")
    
    exploit_scores = rubric.exploit_success_reward_func([good_trajectory])
    print(f"3. Exploit Success (20%): {exploit_scores[0]:.3f}")
    print("   - Number of successful exploitation attempts with proof")
    
    privesc_scores = rubric.privilege_escalation_reward_func([good_trajectory])
    print(f"4. Privilege Escalation (10%): {privesc_scores[0]:.3f}")
    print("   - Number of successful privilege escalations")
    
    false_pos_scores = rubric.false_positives_reward_func([good_trajectory])
    print(f"5. False Positives (-10%): {false_pos_scores[0]:.3f}")
    print("   - Penalty for invalid/unconfirmed vulnerabilities")
    
    reporting_scores = rubric.reporting_quality_reward_func([good_trajectory])
    print(f"6. Reporting Quality (10%): {reporting_scores[0]:.3f}")
    print("   - Completeness of executive summary, technical details, PoC, remediation")
    
    time_scores = rubric.time_efficiency_reward_func([good_trajectory])
    print(f"7. Time Efficiency (5%): {time_scores[0]:.3f}")
    print("   - Time to first confirmed vulnerability (TFFV)")
    
    stealth_scores = rubric.stealth_noise_reward_func([good_trajectory])
    print(f"8. Stealth/Noise (10%): {stealth_scores[0]:.3f}")
    print("   - Penalty for noisy scans and IDS alerts")
    
    # Calculate overall weighted score
    all_scores = [
        discovery_scores[0], severity_scores[0], exploit_scores[0], 
        privesc_scores[0], false_pos_scores[0], reporting_scores[0],
        time_scores[0], stealth_scores[0]
    ]
    weights = rubric.reward_weights
    overall_score = sum(score * weight for score, weight in zip(all_scores, weights))
    
    print(f"\nOverall Weighted Score: {overall_score:.3f}")
    
    # Get detailed analysis
    analysis = rubric.get_detailed_analysis(good_trajectory)
    print(f"\nDetailed Analysis:")
    print(f"  Vulnerabilities: {analysis['vulnerabilities']['validated']}/{analysis['vulnerabilities']['total']} validated")
    print(f"  False Positives: {analysis['vulnerabilities']['false_positives']}")
    print(f"  Average CVSS: {analysis['vulnerabilities']['avg_cvss']:.1f}")
    print(f"  Successful Exploits: {analysis['exploits']['successful']}/{analysis['exploits']['total']}")
    print(f"  Privilege Escalations: {analysis['privilege_escalations']['successful']}/{analysis['privilege_escalations']['total']}")
    print(f"  Stealth Ratio: {analysis['stealth']['stealth_ratio']:.1%}")
    
    # Test poor quality trajectory
    print("\n--- Evaluating Poor Quality Trajectory ---")
    poor_trajectory = create_poor_quality_trajectory()
    
    poor_scores = []
    for reward_func in rubric.reward_funcs:
        score = reward_func([poor_trajectory])[0]
        poor_scores.append(score)
    
    poor_overall = sum(score * weight for score, weight in zip(poor_scores, weights))
    
    print(f"Discovery Score: {poor_scores[0]:.3f}")
    print(f"Severity Score: {poor_scores[1]:.3f}")
    print(f"Exploit Success: {poor_scores[2]:.3f}")
    print(f"Privilege Escalation: {poor_scores[3]:.3f}")
    print(f"False Positives: {poor_scores[4]:.3f}")
    print(f"Reporting Quality: {poor_scores[5]:.3f}")
    print(f"Time Efficiency: {poor_scores[6]:.3f}")
    print(f"Stealth/Noise: {poor_scores[7]:.3f}")
    print(f"Overall Score: {poor_overall:.3f}")
    
    print(f"\n=== Comparison ===")
    print(f"Good Trajectory: {overall_score:.3f}")
    print(f"Poor Trajectory: {poor_overall:.3f}")
    print(f"Difference: {overall_score - poor_overall:.3f}")

if __name__ == "__main__":
    evaluate_pentest_performance() 