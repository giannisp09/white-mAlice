#!/usr/bin/env python3
"""
GRPO training for pentest reconnaissance using nmap commands.

Example usage:
accelerate launch --config-file configs/zero3.yaml --num-processes 2 verifiers/examples/pentest_train.py
"""

import verifiers as vf
from datasets import Dataset
from trl import GRPOTrainer, GRPOConfig
from verifiers.rubrics import PentestRubric
from verifiers.envs import PentestEnv

# convenience function for model initialization
model, tokenizer = vf.get_model_and_tokenizer("Qwen/Qwen2.5-0.5B-Instruct", use_liger=False)

# Create synthetic pentest reconnaissance dataset
def create_pentest_dataset():
    """Create a dataset of pentest reconnaissance prompts."""
    prompts = [
        [{"role": "user", "content": "Perform network reconnaissance on the target network 192.168.1.0/24. Use nmap to discover hosts, open ports, and running services."}],
        [{"role": "user", "content": "Scan the target host 10.0.0.1 for open ports and identify any running services."}],
        [{"role": "user", "content": "Conduct a comprehensive nmap scan of the network 172.16.1.0/24 to identify active hosts and services."}],
        [{"role": "user", "content": "Use nmap to perform a stealth scan on 192.168.100.50 and enumerate available services."}],
        [{"role": "user", "content": "Perform service version detection on the target host 10.10.10.1 using appropriate nmap commands."}],
        [{"role": "user", "content": "Scan the subnet 192.168.2.0/24 to discover live hosts and their open ports."}],
        [{"role": "user", "content": "Execute nmap reconnaissance on 172.30.1.100 to identify network services and their versions."}],
        [{"role": "user", "content": "Perform a port scan on the target 10.20.30.40 and document all discovered services."}],
        [{"role": "user", "content": "Use nmap to investigate the network security posture of 192.168.50.0/28."}],
        [{"role": "user", "content": "Conduct network discovery on the target range 10.1.1.1-10.1.1.20 using nmap scanning techniques."}],
        [{"role": "user", "content": "Perform TCP SYN scan on 172.25.1.1 to identify open ports and running services."}],
        [{"role": "user", "content": "Execute comprehensive reconnaissance on the network segment 192.168.3.0/24."}],
        [{"role": "user", "content": "Use nmap to scan host 10.5.5.5 and determine which services are accessible."}],
        [{"role": "user", "content": "Perform service enumeration on the target system 172.20.1.50 using nmap."}],
        [{"role": "user", "content": "Scan the network 192.168.10.0/25 to identify potential attack vectors through service discovery."}],
        [{"role": "user", "content": "Execute targeted port scanning on 10.100.1.1 to map the network attack surface."}],
        [{"role": "user", "content": "Use nmap to perform OS detection and service versioning on target 172.16.5.5."}],
        [{"role": "user", "content": "Conduct network reconnaissance on 192.168.200.1 focusing on common service ports."}],
        [{"role": "user", "content": "Perform aggressive scanning on the target network 10.0.10.0/24 to gather intelligence."}],
        [{"role": "user", "content": "Execute nmap scripts to enumerate services on the target host 172.31.1.100."}]
    ]
    
    return Dataset.from_dict({"prompt": prompts})

dataset = create_pentest_dataset()

# Analyze token counts
tok_counts = []
for row in dataset:
    messages = row['prompt']
    toks = tokenizer.apply_chat_template(
        messages,
        tokenize=True
    )
    tok_counts.append(len(toks))

# Token count statistics
print(f"Dataset size: {len(tok_counts)}")
print(f"Min tokens: {min(tok_counts)}")
print(f"Max tokens: {max(tok_counts)}")
print(f"Mean tokens: {sum(tok_counts) / len(tok_counts):.1f}")
print(f"Median tokens: {sorted(tok_counts)[len(tok_counts) // 2]}")

# Create environment and rubric for GRPO
env = PentestEnv(max_turns=10)
rubric = PentestRubric()

# GRPO configuration
args = GRPOConfig(
    max_length=4096,
    output_dir="grpo-pentest-nmap",
    per_device_train_batch_size=2,
    gradient_accumulation_steps=4,
    gradient_checkpointing=True,
    bf16=True,
    learning_rate=1e-5,
    num_train_epochs=5,
    weight_decay=0.01,
    max_grad_norm=1.0,
    report_to="wandb",
    save_strategy="epoch",
    save_total_limit=2,
    logging_steps=1,
    save_only_model=True,
    log_on_each_node=True,
    push_to_hub=True,
    hub_model_id="Qwen2.5-0.5B-Pentest-GRPO-v1",
    # GRPO specific parameters
    max_new_tokens=1024,
    temperature=0.7,
    top_p=0.9,
    # Reward scaling
    reward_scale=1.0,
    # Policy optimization
    kl_coef=0.05,
    cliprange=0.2,
    vf_coef=0.5,
    # Logging
    log_with="wandb",
)

# Create GRPO trainer
trainer = GRPOTrainer(
    model=model,
    args=args,
    train_dataset=dataset,
    env=env,
    rubric=rubric,
    tokenizer=tokenizer,
)

print("Starting GRPO training for pentest reconnaissance...")
print("Training agent to perform nmap scanning and network discovery")
trainer.train() 