#!/usr/bin/env python3
"""
Example usage of the simplified PentestRubric focused on nmap reconnaissance.

This example demonstrates how the rubric evaluates:
1. Nmap Discovery (100%): Discovery of hosts, ports, and services using nmap
"""

from verifiers.rubrics import PentestRubric

def create_successful_nmap_trajectory():
    """Create a successful nmap reconnaissance trajectory."""
    return [
        {
            "role": "user",
            "content": "Perform network reconnaissance on the target network 192.168.1.0/24"
        },
        {
            "role": "assistant",
            "content": """<command>nmap -sS 192.168.1.1</command>
<output>Nmap scan report for 192.168.1.1
Host is up (0.001s latency).
Not shown: 997 closed ports
PORT    STATE SERVICE
22/tcp  open  ssh
80/tcp  open  http
443/tcp open  https
MAC Address: 00:50:56:C0:00:08 (VMware)</output>
<host>192.168.1.1</host>
<port>22,80,443</port>
<service>ssh,http,https</service>"""
        },
        {
            "role": "assistant",
            "content": """<command>nmap -sS 192.168.1.2</command>
<output>Nmap scan report for 192.168.1.2
Host is up (0.002s latency).
Not shown: 995 closed ports
PORT     STATE SERVICE
21/tcp   open  ftp
22/tcp   open  ssh
23/tcp   open  telnet
25/tcp   open  smtp
80/tcp   open  http
135/tcp  open  msrpc
MAC Address: 00:50:56:C0:00:09 (VMware)</output>
<host>192.168.1.2</host>
<port>21,22,23,25,80,135</port>
<service>ftp,ssh,telnet,smtp,http</service>"""
        },
        {
            "role": "assistant",
            "content": """<command>nmap -sV 192.168.1.3</command>
<output>Nmap scan report for 192.168.1.3
Host is up (0.001s latency).
Not shown: 998 closed ports
PORT    STATE SERVICE VERSION
22/tcp  open  ssh     OpenSSH 7.4 (protocol 2.0)
443/tcp open  https   Apache httpd 2.4.6
MAC Address: 00:50:56:C0:00:0A (VMware)</output>
<host>192.168.1.3</host>
<port>22,443</port>
<service>ssh,https</service>"""
        }
    ]

def create_basic_nmap_trajectory():
    """Create a basic nmap reconnaissance trajectory with limited discovery."""
    return [
        {
            "role": "user",
            "content": "Scan the target host 192.168.1.10"
        },
        {
            "role": "assistant",
            "content": """<command>nmap 192.168.1.10</command>
<output>Nmap scan report for 192.168.1.10
Host is up (0.001s latency).
Not shown: 999 closed ports
PORT   STATE SERVICE
80/tcp open  http
MAC Address: 00:50:56:C0:00:0B (VMware)</output>
<host>192.168.1.10</host>
<port>80</port>
<service>http</service>"""
        }
    ]

def create_failed_nmap_trajectory():
    """Create a trajectory with failed nmap commands."""
    return [
        {
            "role": "user",
            "content": "Scan the network for active hosts"
        },
        {
            "role": "assistant",
            "content": """<command>nmap 10.0.0.1</command>
<output>Note: Host seems down. If it is really up, but blocking our ping probes, try -Pn
Nmap done: 1 IP address (0 hosts up) scanned in 3.05 seconds</output>
<host></host>
<port></port>
<service></service>"""
        },
        {
            "role": "assistant",
            "content": """<command>invalid_command</command>
<output>Error: Command not allowed. Only network reconnaissance commands are permitted.</output>
<host></host>
<port></port>
<service></service>"""
        }
    ]

def create_comprehensive_nmap_trajectory():
    """Create a comprehensive nmap trajectory with multiple hosts and techniques."""
    return [
        {
            "role": "user",
            "content": "Perform comprehensive network reconnaissance"
        },
        {
            "role": "assistant",
            "content": """<command>nmap -sS -p 1-1000 192.168.1.5</command>
<output>Nmap scan report for 192.168.1.5
Host is up (0.001s latency).
Not shown: 993 closed ports
PORT     STATE SERVICE
21/tcp   open  ftp
22/tcp   open  ssh
23/tcp   open  telnet
25/tcp   open  smtp
53/tcp   open  domain
80/tcp   open  http
443/tcp  open  https
MAC Address: 00:50:56:C0:00:0C (VMware)</output>
<host>192.168.1.5</host>
<port>21,22,23,25,53,80,443</port>
<service>ftp,ssh,telnet,smtp,http,https</service>"""
        },
        {
            "role": "assistant",
            "content": """<command>nmap -sS 192.168.1.6</command>
<output>Nmap scan report for 192.168.1.6
Host is up (0.001s latency).
Not shown: 996 closed ports
PORT     STATE SERVICE
22/tcp   open  ssh
80/tcp   open  http
135/tcp  open  msrpc
445/tcp  open  microsoft-ds
MAC Address: 00:50:56:C0:00:0D (VMware)</output>
<host>192.168.1.6</host>
<port>22,80,135,445</port>
<service>ssh,http</service>"""
        },
        {
            "role": "assistant",
            "content": """<command>nmap -sS 192.168.1.7</command>
<output>Nmap scan report for 192.168.1.7
Host is up (0.002s latency).
Not shown: 998 closed ports
PORT    STATE SERVICE
22/tcp  open  ssh
443/tcp open  https
MAC Address: 00:50:56:C0:00:0E (VMware)</output>
<host>192.168.1.7</host>
<port>22,443</port>
<service>ssh,https</service>"""
        }
    ]

def evaluate_nmap_performance():
    """Evaluate nmap reconnaissance performance using the simplified rubric."""
    
    # Create the rubric
    rubric = PentestRubric()
    
    print("=== Simplified Penetration Testing Rubric - Nmap Discovery ===\n")
    
    # Test successful trajectory
    print("--- Evaluating Successful Nmap Trajectory ---")
    good_trajectory = create_successful_nmap_trajectory()
    
    discovery_score = rubric.nmap_discovery_reward_func(good_trajectory)
    print(f"Nmap Discovery Score: {discovery_score:.3f}")
    
    # Extract discovery details
    discovered = rubric._extract_nmap_results(good_trajectory)
    print(f"Hosts discovered: {len(discovered['hosts'])} - {list(discovered['hosts'])}")
    print(f"Ports discovered: {len(discovered['open_ports'])} - {list(discovered['open_ports'])}")
    print(f"Services discovered: {len(discovered['services'])} - {list(discovered['services'])}")
    
    # Test basic trajectory
    print("\n--- Evaluating Basic Nmap Trajectory ---")
    basic_trajectory = create_basic_nmap_trajectory()
    
    basic_score = rubric.nmap_discovery_reward_func(basic_trajectory)
    print(f"Nmap Discovery Score: {basic_score:.3f}")
    
    basic_discovered = rubric._extract_nmap_results(basic_trajectory)
    print(f"Hosts discovered: {len(basic_discovered['hosts'])} - {list(basic_discovered['hosts'])}")
    print(f"Ports discovered: {len(basic_discovered['open_ports'])} - {list(basic_discovered['open_ports'])}")
    print(f"Services discovered: {len(basic_discovered['services'])} - {list(basic_discovered['services'])}")
    
    # Test failed trajectory
    print("\n--- Evaluating Failed Nmap Trajectory ---")
    failed_trajectory = create_failed_nmap_trajectory()
    
    failed_score = rubric.nmap_discovery_reward_func(failed_trajectory)
    print(f"Nmap Discovery Score: {failed_score:.3f}")
    
    failed_discovered = rubric._extract_nmap_results(failed_trajectory)
    print(f"Hosts discovered: {len(failed_discovered['hosts'])} - {list(failed_discovered['hosts'])}")
    print(f"Ports discovered: {len(failed_discovered['open_ports'])} - {list(failed_discovered['open_ports'])}")
    print(f"Services discovered: {len(failed_discovered['services'])} - {list(failed_discovered['services'])}")
    
    # Test comprehensive trajectory
    print("\n--- Evaluating Comprehensive Nmap Trajectory ---")
    comprehensive_trajectory = create_comprehensive_nmap_trajectory()
    
    comprehensive_score = rubric.nmap_discovery_reward_func(comprehensive_trajectory)
    print(f"Nmap Discovery Score: {comprehensive_score:.3f}")
    
    comprehensive_discovered = rubric._extract_nmap_results(comprehensive_trajectory)
    print(f"Hosts discovered: {len(comprehensive_discovered['hosts'])} - {list(comprehensive_discovered['hosts'])}")
    print(f"Ports discovered: {len(comprehensive_discovered['open_ports'])} - {list(comprehensive_discovered['open_ports'])}")
    print(f"Services discovered: {len(comprehensive_discovered['services'])} - {list(comprehensive_discovered['services'])}")
    
    print(f"\n=== Score Breakdown ===")
    print(f"Comprehensive: {comprehensive_score:.3f} (3 hosts, 13 ports, 5 services)")
    print(f"Successful: {discovery_score:.3f} (3 hosts, 11 ports, 5 services)")
    print(f"Basic: {basic_score:.3f} (1 host, 1 port, 1 service)")
    print(f"Failed: {failed_score:.3f} (0 hosts, 0 ports, 0 services)")
    
    print(f"\n=== Scoring Formula ===")
    print(f"Score = (hosts/3 * 0.4) + (ports/10 * 0.4) + (services/5 * 0.2)")
    print(f"Max score: 1.0 (achieved with 3+ hosts, 10+ ports, 5+ services)")

def demonstrate_rubric_usage():
    """Demonstrate how to use the rubric with different trajectory types."""
    
    rubric = PentestRubric()
    
    print("=== Rubric Usage Examples ===\n")
    
    # Single trajectory evaluation
    trajectory = create_successful_nmap_trajectory()
    score = rubric.nmap_discovery_reward_func(trajectory)
    print(f"Single trajectory score: {score:.3f}")
    
    # Multiple trajectory evaluation (batch scoring)
    trajectories = [
        create_comprehensive_nmap_trajectory(),
        create_successful_nmap_trajectory(),
        create_basic_nmap_trajectory(),
        create_failed_nmap_trajectory()
    ]
    
    print("\nBatch evaluation:")
    for i, traj in enumerate(trajectories):
        score = rubric.nmap_discovery_reward_func(traj)
        print(f"Trajectory {i+1}: {score:.3f}")

if __name__ == "__main__":
    evaluate_nmap_performance()
    print("\n" + "="*60 + "\n")
    demonstrate_rubric_usage() 