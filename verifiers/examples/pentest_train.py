#!/usr/bin/env python3
"""
GRPO training for pentest reconnaissance using nmap commands.

Example usage:
accelerate launch --config-file configs/zero3.yaml --num-processes 2 verifiers/examples/pentest_train.py
"""

import verifiers as vf
from datasets import Dataset
from trl import GRPOTrainer, GRPOConfig
from verifiers.rubrics import PentestRubric
from verifiers.envs import PentestEnv

# convenience function for model initialization
model, tokenizer = vf.get_model_and_tokenizer("Qwen/Qwen2.5-0.5B-Instruct", use_liger=False)

# Create synthetic pentest reconnaissance dataset
def create_pentest_dataset():
    """Create a dataset of pentest reconnaissance prompts."""
    questions = [
        "Perform network reconnaissance on the target network 192.168.1.0/24. Use nmap to discover hosts, open ports, and running services.",
        "Scan the target host 10.0.0.1 for open ports and identify any running services.",
        "Conduct a comprehensive nmap scan of the network 172.16.1.0/24 to identify active hosts and services.",
        "Use nmap to perform a stealth scan on 192.168.100.50 and enumerate available services.",
        "Perform service version detection on the target host 10.10.10.1 using appropriate nmap commands.",
        "Scan the subnet 192.168.2.0/24 to discover live hosts and their open ports.",
        "Execute nmap reconnaissance on 172.30.1.100 to identify network services and their versions.",
        "Perform a port scan on the target 10.20.30.40 and document all discovered services.",
        "Use nmap to investigate the network security posture of 192.168.50.0/28.",
        "Conduct network discovery on the target range 10.1.1.1-10.1.1.20 using nmap scanning techniques.",
        "Perform TCP SYN scan on 172.25.1.1 to identify open ports and running services.",
        "Execute comprehensive reconnaissance on the network segment 192.168.3.0/24.",
        "Use nmap to scan host 10.5.5.5 and determine which services are accessible.",
        "Perform service enumeration on the target system 172.20.1.50 using nmap.",
        "Scan the network 192.168.10.0/25 to identify potential attack vectors through service discovery.",
        "Execute targeted port scanning on 10.100.1.1 to map the network attack surface.",
        "Use nmap to perform OS detection and service versioning on target 172.16.5.5.",
        "Conduct network reconnaissance on 192.168.200.1 focusing on common service ports.",
        "Perform aggressive scanning on the target network 10.0.10.0/24 to gather intelligence.",
        "Execute nmap scripts to enumerate services on the target host 172.31.1.100."
    ]
    
    # Create answer placeholders (for GRPO, the reward comes from environment interaction)
    answers = ["reconnaissance_complete"] * len(questions)
    
    return Dataset.from_dict({"question": questions, "answer": answers})

dataset = create_pentest_dataset()

# Analyze token counts
tok_counts = []
for row in dataset:
    question = row['question']
    # Create a simple chat template with the question
    messages = [{"role": "user", "content": question}]
    toks = tokenizer.apply_chat_template(
        messages,
        tokenize=True
    )
    tok_counts.append(len(toks))

# Token count statistics
print(f"Dataset size: {len(tok_counts)}")
print(f"Min tokens: {min(tok_counts)}")
print(f"Max tokens: {max(tok_counts)}")
print(f"Mean tokens: {sum(tok_counts) / len(tok_counts):.1f}")
print(f"Median tokens: {sorted(tok_counts)[len(tok_counts) // 2]}")

# Create environment and rubric for GRPO
env = PentestEnv(max_turns=10, dataset=dataset)
rubric = PentestRubric()

# GRPO configuration
args = GRPOConfig(
    output_dir="grpo-pentest-nmap",
    run_name="pentest-nmap-grpo",
    per_device_train_batch_size=2,
    gradient_accumulation_steps=4,
    gradient_checkpointing=True,
    bf16=True,
    learning_rate=1e-5,
    num_train_epochs=3,
    max_grad_norm=1.0,
    report_to="wandb",
    save_strategy="epoch",
    save_total_limit=2,
    logging_steps=1,
    save_only_model=True,
    log_on_each_node=True,
    push_to_hub=True,
    hub_model_id="Qwen2.5-0.5B-Pentest-GRPO-v1",
    # GRPO specific parameters
    max_prompt_length=1024,
    max_completion_length=1024,
    num_generations=8,
    num_iterations=2,
    temperature=0.7,
    top_p=0.9,
    beta=0.01,
    epsilon=0.2,
    log_completions=True,
)

trainer = vf.GRPOTrainer(
    model=model,
    env=env,
    args=args,
    processing_class=tokenizer,
)
print("Starting GRPO training for pentest reconnaissance...")
print("Training agent to perform nmap scanning and network discovery")
trainer.train() 